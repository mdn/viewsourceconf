// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.


// Define common variables and mixins

// Typography
// Respect the user's preferences by sizing with rems.
$base-font-size = 100%;

// Convert font-size units to rems if the unit is in pixels.
// Declare your size in pixels and this function automatically adds the
// equivalent size in rems while leaving the px declaration as the fallback
// for old browsers.
// Based on Aral Balkan's Responsive Pixels - https://github.com/aral/responsive-pixels
remify(value) {
    u = unit(value);

    if value is 'inherit' or value is 'smaller' or value is null {
        value
    } else if u is 'px' {
        return unit(value/16, 'rem');
    } else {
        return unit(value, u);
    }
}

// Abstract longhand for properties that take a single value
abstract-longhand(prop, originalArguments) {
    value = originalArguments[0]
    remifiedValue = remify(value)

    {prop} value

    if value != remifiedValue {
        {prop} remify(value)
    }
}

// Remify font-size declarations
font-size() {
    abstract-longhand('font-size', arguments)
}


// Colors
$green          = #00aa86;
$light-green    = #5bc0a4;
$blue           = #0b5ca5;
$dark-blue      = #1d4388;
$beige          = #e6e5dc;
$light-beige    = #f0f0e8;
$dark-beige     = darken($beige, 10%);

$primary-text-color     = #000;
$secondary-text-color   = #666;
$light-text-color       = #fff;

$link-color = $green;


// Light links for dark backgrounds
invert-links = @block {
    a {
        color: lighten($link-color, 60%);
        text-decoration: none;

        &:visited {
            color: lighten($link-color, 50%);
        }

        &:hover,
        &:focus,
        &:active {
            color: lighten($link-color, 70%);
            text-decoration: underline;
        }
    }
}


// White links for some occasions
light-links = @block {
    a {
        color: #fff;

        &:visited {
            color: #eee;
        }

        &:hover,
        &:focus,
        &:active {
            color: #fff;
            text-decoration: underline;
        }
    }
}


// Common widths
$width-desktop-wide = 1400px;
$width-desktop      = 1000px;
$width-tablet       = 760px;
$width-mobile-wide  = 440px;
$width-mobile       = 320px;


// Media queries
$media-query-desktop-wide   = 'screen and (min-width: 1400px)';
$media-query-desktop        = 'screen and (min-width: 1000px)';
$media-query-tablet         = 'screen and (min-width: 760px)';
$media-query-mobile-wide    = 'screen and (min-width: 480px)';
$media-query-mobile         = 'screen and (max-width: 480px)';


// Grid units
$grid-column-width          = 60px;
$grid-narrow-column-width   = 40px;
$grid-gutter-width          = 20px;


// Column spans for standard column widths
span(columns) {
    float: left;
    width: ($grid-column-width * columns) + ($grid-gutter-width * (columns - 1));
    margin-left: ($grid-gutter-width / 2);
    margin-right: ($grid-gutter-width / 2);
}

span_all() {
    float: none;
    width: auto;
    margin-left: ($grid-gutter-width / 2);
    margin-right: ($grid-gutter-width / 2);
}

offset(columns) {
    margin-left: (($grid-column-width + $grid-gutter-width) * columns) + ($grid-gutter-width * 0.5);
}


// Column spans for narrow column widths
span_narrow(columns) {
    float: left;
    width: ($grid-narrow-column-width * columns) + ($grid-gutter-width * (columns - 1));
    margin-left: ($grid-gutter-width / 2);
    margin-right: ($grid-gutter-width / 2);
}

offset_narrow(columns) {
    margin-left: (($grid-narrow-column-width + $grid-gutter-width) * columns) + ($grid-gutter-width * 0.5);
}


// Mixins
clearfix() {
  &:before, &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

a11y-hidden() {
    position: absolute !important;
    height: 1px;
    width: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    padding: 0;
    border: 0;
}

transition(n) {
    -webkit-transition: n;
    transition: n;
}

border-box() {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
